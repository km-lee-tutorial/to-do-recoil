{"version":3,"sources":["atoms/index.ts","theme/index.ts","theme/globalStyle.ts","components/CreateToDo/CreateToDo.tsx","components/ToDo/ToDo.tsx","components/TodoList/TodoList.tsx","pages/Home/Home.tsx","App.tsx","index.tsx"],"names":["Categories","darkTheme","bgColor","textColor","accentColor","cardBgColor","lightTheme","GlobalStyle","isDark","css","reset","isDarkAtom","atom","key","default","categoryState","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","Todo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","newTodos","splice","DOING","DONE","TodoList","useRecoilState","setCategory","value","onInput","map","ToDo","Home","App","theme","styles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36ff9c31.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nexport enum Categories {\n  'TO_DO' = 'TO_DO',\n  'DOING' = 'DOING',\n  'DONE' = 'DONE',\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const isDarkAtom = atom<boolean>({\n  key: 'isDark',\n  default: true,\n});\n\nexport const categoryState = atom<Categories>({\n  key: 'category',\n  default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: 'toDo',\n  default: [],\n});\n\n// selector을 사용해 내가 원하는 상태로 변경한다.\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","interface ITheme {\n  [key: string]: string;\n}\n\nexport const darkTheme: ITheme = {\n  bgColor: '#2f3640',\n  textColor: 'white',\n  accentColor: '#9c88ff',\n  cardBgColor: 'transparent',\n};\n\nexport const lightTheme: ITheme = {\n  bgColor: '#f5f5f5',\n  textColor: 'black',\n  accentColor: '#9c88ff',\n  cardBgColor: 'white',\n};\n\nexport type ThemeType = typeof darkTheme;\n","import { css } from '@emotion/react';\nimport reset from 'emotion-reset';\nimport { ThemeType } from '.';\n\nconst GlobalStyle = (isDark: ThemeType) => css`\n  ${reset}\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  menu,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  main,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  main,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n  *[hidden] {\n    display: none;\n  }\n  body {\n    font-weight: 300;\n    font-family: 'Source Sans Pro', sans-serif;\n    line-height: 1;\n    background-color: ${isDark.bgColor};\n    color: ${isDark.textColor};\n    line-height: 1.2;\n  }\n  menu,\n  ol,\n  ul,\n  li {\n    list-style: none;\n  }\n\n  blockquote,\n  q {\n    quotes: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  * {\n    box-sizing: border-box;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nexport default GlobalStyle;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { categoryState, toDoState } from '@/atoms';\n\ninterface CreateToDoProps {}\n\ninterface IForm {\n  toDo: string;\n}\n\nconst CreateToDo: React.FC<CreateToDoProps> = ({}) => {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\n    setValue('toDo', '');\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'Please write a To Do',\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n};\n\nexport default CreateToDo;\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { Categories, IToDo, toDoState } from '@/atoms';\n\nconst Todo = ({ text, category, id }: IToDo) => {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as IToDo['category'] };\n\n      const newTodos = [...oldToDos]; // create new array\n      newTodos.splice(targetIndex, 1, newToDo);\n      return newTodos;\n    });\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n};\n\nexport default Todo;\n","import { useRecoilState, useRecoilValue } from 'recoil';\n\nimport { Categories, categoryState, toDoSelector } from '@/atoms';\nimport CreateToDo from '@/components/CreateToDo';\nimport ToDo from '@/components/ToDo';\n\ninterface TodoListProps {}\n\nconst TodoList: React.FC<TodoListProps> = ({}) => {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from '@/components/TodoList/TodoList';\n\ninterface HomeProps {}\n\nconst Home: React.FC<HomeProps> = ({}) => {\n  return (\n    <>\n      <TodoList />\n    </>\n  );\n};\n\nexport default Home;\n","import { Global, ThemeProvider } from '@emotion/react';\nimport { useRecoilValue } from 'recoil';\n\nimport { darkTheme, lightTheme } from '@/theme';\nimport GlobalStyle from '@/theme/globalStyle';\nimport { isDarkAtom } from './atoms';\nimport Home from './pages/Home';\n\nfunction App(): JSX.Element {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n      <Global styles={GlobalStyle(isDark ? darkTheme : lightTheme)} />\n      <Home />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\n\nimport App from '@/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}